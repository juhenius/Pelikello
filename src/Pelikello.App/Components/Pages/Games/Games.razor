@page "/games"
@using Microsoft.AspNetCore.Authorization
@using Pelikello.App.Components.Pages.Icons
@using Pelikello.App.Tracking
@implements IDisposable
@inject IGameRepository GameRepository
@inject TrackingEvents TrackingEvents
@attribute [Authorize]

<div class="flex flex-col items-center mt-8 text-left whitespace-nowrap">
  <h2 class="text-2xl font-bold mb-4">Games</h2>
  <table class="min-w-full bg-white border border-gray-200 mb-8">
    <thead>
      <tr>
        <th class="px-4 py-2 border-b">Name</th>
        <th class="px-4 py-2 border-b">Pattern</th>
        <th class="px-4 py-2 border-b">Actions</th>
      </tr>
    </thead>
    <tbody>
      @foreach (var game in games)
      {
        <tr>
          <td class="px-4 py-2 border-b">@game.Name</td>
          <td class="px-4 py-2 border-b">@game.Pattern</td>
          <td class="px-4 py-2 border-b flex gap-2">
            <button class="text-blue-600 hover:text-blue-800" @onclick="() => EditGame(game)" title="Edit">
              <EditIcon />
            </button>
            <button class="text-red-600 hover:text-red-800" @onclick="() => DeleteGame(game)" title="Delete">
              <TrashIcon />
            </button>
          </td>
        </tr>
      }
    </tbody>
  </table>
</div>

@if (gameToEdit != null)
{
  <EditGameModal Game="gameToEdit" OnClose="CloseEditModal" />
}

@code {
  private List<Game> games = new();
  private Game? gameToEdit;

  protected override async Task OnInitializedAsync()
  {
    TrackingEvents.GamesUpdated += OnGamesUpdated;
    await LoadGames();
  }

  private async void OnGamesUpdated()
  {
    await LoadGames();
    await InvokeAsync(StateHasChanged);
  }

  private async Task LoadGames()
  {
    games = await GameRepository.GetGames();
  }

  private async Task DeleteGame(Game game)
  {
    await GameRepository.DeleteGame(game);
  }

  private void EditGame(Game game)
  {
    gameToEdit = game;
  }

  private void CloseEditModal()
  {
    gameToEdit = null;
  }

  public void Dispose()
  {
    TrackingEvents.GamesUpdated -= OnGamesUpdated;
  }
}
